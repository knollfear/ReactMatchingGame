{"version":3,"sources":["logo.svg","components/card.js","components/gameSelector.js","components/gameContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","card","backImage","onClick","flipped","undefined","className","matched","useImg","src","img","alt","txt","GameSelector","sendResults","Modal","Dialog","Header","closeButton","Title","Body","style","Color","value","Footer","Button","source","GameContainer","props","bind","state","num_matches","cards","winner","turns","matches","activeCard","index","selectedSource","window","location","handleClick","this","setState","console","log","fetch","then","response","json","entity","possibleCards","chosenCards","fill","i","randomPos","Math","floor","random","length","push","Object","assign","splice","array","t","m","shuffle","setupGame","transition","slice","ms","flippedCards","filter","toSleep","forEach","Promise","resolve","setTimeout","Fragment","map","key","React","Component","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9cf5afb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\n\nexport default function Card({card, backImage, onClick}){\n    return(\n        <div onClick={!card.flipped ? onClick:undefined} className={`memory-card ${card.matched ? \"matched\": \"\"} ${card.flipped ? 'flip':''}`}>\n            {card.flipped ?\n                card.useImg ?\n                    <img className={\"img-card\"} src={card.img} alt={card.txt}/>\n                    :\n                    <span className={\"name-card\"}>\n                            {card.txt}\n                        </span>\n                :\n                <img className=\"back-card\" src={backImage} alt=\"Memory Card\"/>\n            }\n        </div>\n\n    )\n}\n","import React from \"react\";\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\n\nexport default function GameSelector({sendResults}) {\n\n    return(\n        <Modal.Dialog>\n            <Modal.Header closeButton>\n                <Modal.Title>Modal title</Modal.Title>\n            </Modal.Header>\n\n            <Modal.Body>\n                <div style={{Color:\"black\"}}>\n                    Please select a source\n                    <select>\n                        <option value={\"fearless\"}>Fearless</option>\n                        <option value={\"presidents\"}>Presidents</option>\n                    </select>\n                </div>\n            </Modal.Body>\n\n            <Modal.Footer>\n                <Button onClick={() => sendResults({source:\"fearlesss\"})}>Start</Button>\n            </Modal.Footer>\n        </Modal.Dialog>\n    )\n}","import React from 'react';\nimport Card from \"./card\";\nimport GameSelector from \"./gameSelector\";\n\n\nexport default class GameContainer extends React.Component{\n    constructor(props){\n        super(props);\n        this.sendResults = this.sendResults.bind(this);\n        this.state={\n            num_matches:8,\n            cards:[],\n            winner:false,\n            turns:0,\n            matches:0,\n            activeCard:null,\n            index:null,\n            selectedSource:'fearless',\n            backImage:`${window.location}/img/fearless.png`\n        };\n        this.handleClick = this.handleClick.bind(this)\n    }\n\n    sendResults(source){\n        this.setState({selectedSource:source}, () => {console.log(`Set selectedSource to ${this.state.selectedSource}`)})\n    }\n\n    setupGame(){\n            fetch(`${window.location}/static/media/${this.state.selectedSource}.json`).then((response) =>{\n                return response.json()\n            }).then((entity)=>{\n                console.log(entity);\n                let possibleCards = entity.cards;\n\n                let chosenCards = [].fill(null, this.state.num_matches);\n                for (let i=0; i<this.state.num_matches; i++){\n                    let randomPos = Math.floor(Math.random() * possibleCards.length);\n\n                    let card = possibleCards[randomPos];\n                    card.useImg = true;\n                    card.flipped = false;\n                    chosenCards.push(card);\n                    card = Object.assign({}, card);\n                    card.useImg = false;\n                    chosenCards.push(card);\n                    possibleCards.splice(randomPos,1)\n                }\n\n                shuffle(chosenCards);\n\n                this.setState({cards:chosenCards})\n            });\n\n    }\n    componentDidMount() {\n        this.setupGame()\n    }\n    handleClick(index){\n        console.log(this.state);\n        if (this.state.transition){\n            return\n        }\n        let cards = this.state.cards.slice();\n        let card = cards[index];\n        card.flipped = true;\n        this.setState({cards:cards, transition:true}, ()=>{\n\n                let cards = this.state.cards.slice();\n                let flippedCards = cards.filter((card) =>card.flipped && !card.matched);\n                let matches = this.state.matches;\n                let turns = this.state.turns;\n                let toSleep = 0;\n                if (flippedCards.length === 2){\n\n                    turns ++;\n                    if(flippedCards[0].txt === flippedCards[1].txt){\n                        flippedCards.forEach(card => card.matched = true);\n                        matches ++;\n                    } else{\n                        toSleep = 1000;\n                        flippedCards.forEach(card => card.flipped = false)\n                    }\n\n                }\n            sleep(toSleep).then(()=>{\n                this.setState({matches:matches, turns:turns, cards:cards, transition:false})\n            })\n        })\n    }\n\n\n    render(){\n        return(\n            <div className={\"memory-game\"}>\n                {this.state.selectedSource ?\n                    <React.Fragment>\n                        {this.state.cards.map((card, index) =>  {\n                            return (\n                                <Card card={card}\n                                      backImage={this.state.backImage}\n                                      onClick={() => this.handleClick(index)}\n                                      key={`${card.useImg ? 'pic' : 'name'}-${card.img}`}\n                                />\n                            )\n                        })}\n\n                    </React.Fragment>\n                    :\n                    <GameSelector sendResults={this.sendResults}/>\n\n                }\n            </div>\n        )\n    };\n\n};\n\nfunction shuffle(array) {\n    let m = array.length, t, i;\n    while (m) {\n        i = Math.floor(Math.random() * m--);\n        t = array[m];\n        array[m] = array[i];\n        array[i] = t;\n    }\n}\n\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n\n\n\n\n\n\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport GameContainer from \"./components/gameContainer\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}